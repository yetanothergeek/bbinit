#!/lib/bb/sh
# -*- mode: sh; -*-


# Shutdown any active TCP/UDP servers before bringing down
# network interfaces, else some remote clients might hang.
stop_servers () {
  local srv_pids=$(
   netstat -ntulp 2> /dev/null | awk \
      '/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+.*/ {
        gsub(/\/.*$/,"");
        print $7
      }' | sort -n
  )
  local all_pids=$(
    cd /proc
    find . -maxdepth 1 -type d -name '[0-9]*' | cut -c 3-
  )
  local kid_pids=$(
  for P in $all_pids
  do
    [ -e /proc/$P/status ] || continue
    PP=$(awk '/^PPid:/ {print $2}' /proc/$P/status )
    for NP in $srv_pids
    do
      [ $PP = $NP ] && echo $P
    done
  done
  )
  [ -z "$kid_pids" ] && [ -z "$srv_pids" ] && return
  echo "Sending active TCP/UDP servers the $1 signal."
  kill -$1 $kid_pids $srv_pids
  sleep 1
}


# Return a list of all PIDs, sorted by time: most recently started first, oldest last
get_pid_list () {
  cd /proc
  local P
  for P in [0-9]*; do
    [ -d "$P" ] || continue
    awk '{sub(/.*) /,""); printf("%s.%.08d\n",$20,'$P')}' $P/stat
  done | sort -gr | awk '{sub(/[0-9]+\.[0]+/,""); print}'
  cd /
}


stop_tasks () {
  local reversed=''
  for include_file in /etc/bb.d/task/* ; do
    [ -f $include_file ] && reversed="$include_file $reversed"
  done
  task_stop () { : ; }
  for include_file in $reversed ; do
    local base_name=/etc/bb.d/task/local/${include_file#*-}
    [ -f $base_name.pre_stop ] && . $base_name.pre_stop
    [ -f $base_name.mask_stop ] && include_file=$base_name.mask_stop
    [ -f $include_file ] && . $include_file && task_stop
    task_stop () { : ; }
    [ -f $base_name.post_stop ] && . $base_name.post_stop
  done
}


# Return 0 if there are any block devices under /dev/mapper/
have_devmaps () {
  local devmap
  for devmap in /dev/mapper/* ; do
    [ -b "$devmap" ] && return 0
  done
  return 1
}


rcz_main () {

cd /
chvt 1
echo 'The system is going down for the count, NOW!' >&2
sleep 2

stop_tasks

mount -t nfs | while read Dev on MtPt Etc ; do
  NfsSrv="${Dev%:*}"
  if ping -q -c 1 -W 3 ${Dev%:*} > /dev/null ; then
    umount "$MtPt" || umount -l "$MtPt"
  else
    umount -f "$MtPt" || umount -f -l "$MtPt"
  fi
done

stop_servers TERM
stop_servers KILL
local sig_spec
if pgrep '^pppd$' > /dev/null ; then
  echo "Shutting down ppp daemons"
  which poff > /dev/null && poff -a
  for sig_spec in TERM KILL; do
    pgrep '^pppd$' > /dev/null && killall -${sig_spec} pppd && sleep 1
  done
fi

(
  cd /sys/class/net
  for iface in *; do
    case "$iface" in
      lo) ;;
      *) 
        case $(cat "$iface/operstate") in
          down) ;;
          *)
            echo "Bringing down network interface '$iface'"
            ifconfig "$iface" down
            sleep 0.25s
          ;;
        esac
      ;;
    esac
  done
)

sleep 1s

# If there are devices in /dev/mapper/ and udevd is running
# don't kill it else cryptsetup might hang.
local udevd=0

for sig_spec in TERM KILL KILL; do
  echo "Sending remaining processes the $sig_spec signal"
  local some_pid
  for some_pid in $(get_pid_list) ; do
    [ $some_pid -eq 1 ] && continue
    [ $some_pid -eq $$ ] && continue
    if have_devmaps ; then
      comm="/proc/$some_pid/comm"
      [ -e $comm ] && read exe < $comm && [ -n "$exe" ] \
        && [ $exe = 'udevd' ] && udevd=1 && continue
    fi
    [ -d /proc/$some_pid ] || continue
    kill -$sig_spec $some_pid
  done
  sleep 1
done

N=0
while [ $N -lt 10 ]; do
  if [ -e /proc/swaps ]; then
    [ $(wc -l < /proc/swaps) -gt 1 ] && swapoff -a 
  else
    swapoff -a # What else can we do if there is no /proc/swaps ?
  fi
  if [ -e /proc/mounts ] ; then
    local mounts="$(tac /proc/mounts)"
    echo "${mounts}" | while read dev mnt typ opt dmp pss; do
      case $mnt in
        /|/proc|/sys|/dev/pts|/dev) ;;
        *) 
          case "$typ" in
            proc|devtmpfs|devpts|sysfs) ;;
            *)
              if umount -r $mnt; then
                echo "Unmounted $dev on $mnt"
                case "$dev" in
                  /dev/mapper/*)
                    MapDev=${dev##*/}
                    if cryptsetup close "$MapDev" ; then
                      echo "Removed mapping $dev"
                    else
                      echo "Failed to remove mapping $dev"
                    fi
                    if [ $udevd = 1 ] && ! have_devmaps ; then
                      killall udevd
                      udevd=0
                    fi
                  ;;
                esac
              else
                echo "Failed to unmount $dev on $mnt"
                sleep 2
              fi
            ;;
          esac
        ;;
      esac
    done
  fi
  sync
  mount -o remount,ro / && break
  N=$((N+1))
  sleep 1
  case $N in
    10)
      echo "Read-only remount of root filesystem failed after $N tries, giving up!"
      remount_ro_error_log='/var/log/remount-ro-error.log'
      touch $remount_ro_error_log || break
      echo "PID   (Name)    cmdline" > $remount_ro_error_log
      for P in $(fuser /); do
        printf "%s " $P
        [ -e /proc/$P/status ] && awk '/^Name:/ {printf(" (%s) ", $2)}'  /proc/$P/status  || printf " (???) "
        [ -e /proc/$P/cmdline ] && tr '\0' ' ' < /proc/$P/cmdline || printf "???"
        echo
      done >> $remount_ro_error_log
      echo "Devices:" >> $remount_ro_error_log
      mount >> $remount_ro_error_log
      echo "Check $remount_ro_error_log after next boot!"
      for N in 1 2 3
      do
        sync
        sync
        sleep 1
      done
      exec reboot -d 2 -f
    ;;
    *) echo "Read-only remount of root filesystem failed, retrying..."  ;;
  esac
done

echo "Returning control to init"
sleep 1s
exec kill -KILL -1

}

rcz_main
