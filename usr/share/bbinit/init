#!/bin/busybox sh

# Adapted from http://wiki.sourcemage.org/HowTo%282f%29Initramfs.html
# https://web.archive.org/web/20160306130505/http://wiki.sourcemage.org/HowTo(2f)Initramfs.html

PATH='/bin:/sbin:/usr/bin:/usr/sbin'
NEWROOT='/new_root'
INIT_ARGS=''
BB='/bin/busybox'
loglevel=2
mdev_log=""

FAIL () {
  printf '\n %s \n\n Entering rescue shell. \n' "$1"
  $BB sh -l
}

INFO () { [ $loglevel -gt 1 ] && echo $@ || : ; }

do_mount () { INFO "Mounting $1 on $2"; $BB mount -t $1 $1 $2; }

greeting="Preparing initramfs and mounting /proc"
printf "$greeting"
$BB mkdir -p /sbin /usr/bin /usr/sbin /proc /sys /dev
$BB --install -s
mount -t proc proc /proc

for ARG in $($BB cat /proc/cmdline); do
  case "$ARG" in
    *.*=*) ;;
    *=*) eval $ARG ;;
    quiet) loglevel=1 ;;
    mdev.log) mdev_log='/dev/mdev.log' ;;
  esac
  INIT_ARGS="$INIT_ARGS $ARG"
done

printf "%d" $loglevel &> /dev/null || loglevel=2
[ $loglevel -gt 8 ] && loglevel=8
[ $loglevel -lt 1 ] && loglevel=1
$BB dmesg -n $loglevel

[ $loglevel -eq 1 ] && printf "\r ${greeting//?/ } \r" || echo

do_mount sysfs /sys
do_mount devtmpfs /dev
[ -c /dev/null ] || $BB mknod -m 666 /dev/null c 1 3

MODULES_DIR="/lib/modules/$($BB uname -r)"

if [ -d "$MODULES_DIR" ] ; then
  INFO "Running depmod"
  $BB depmod
fi

if type -p mdev &> /dev/null ; then
  INFO 'Initializing mdev'
  [ "x$mdev_log" != 'x' ] && $BB touch "$mdev_log"
  if [ -e /proc/sys/kernel/hotplug ] ; then 
    echo $(type -p mdev) > /proc/sys/kernel/hotplug
  else
    if type -p uevent &>/dev/null; then
      INFO 'Starting ramfs uevent daemon'
      uevent $(type -p mdev) &
    fi
  fi
  $BB mdev -s
fi

do_modprobe () {
  $BB modprobe $1
}

if [ "x$modules" != 'x' ]; then
  for M in ${modules//,/ }; do
    do_modprobe $M
  done
fi

if [ -e /etc/autoscan ] ; then
  INFO "Scanning for hardware"
  $BB find /sys -type f -name modalias -exec $BB cat {} + | $BB sort -u | while read M ; do
    do_modprobe $M 2> /dev/null
  done
  INFO "Loading filesystem modules"
  for M in $($BB find "$MODULES_DIR/kernel/fs" -type f -name '*.ko') ; do
    for A in $($BB modinfo -F alias $M) ; do
      do_modprobe "$A" && break
    done
  done
else
  if [ -f /etc/modules ]; then
    INFO "Loading /etc/modules"
    while read M; do
      do_modprobe $M
    done < /etc/modules
  fi
fi

if [ "$root" = 'self' ] ; then
  [ "x$init" = 'x' ] && init='/sbin/init'
  [ -f "$init" ] && [ -x "$init" ] || \
    FAIL "Don't know what to do, cannnot find $init"
  exec $init $INIT_ARGS
fi

INFO "Searching for root device"

printf "%d" "$rootdelay" &> /dev/null || rootdelay=20
[ "$rootdelay" -lt 1 ] && rootdelay=1
timeout=$rootdelay

case "$root" in
  *=*)
    found_root=$($BB findfs $root)
    while [ $timeout -gt 0 ] && [  "x$found_root" = 'x' ]; do
      $BB mdev -s
      printf " Waiting %d seconds to resolve %s    \r" "$timeout" "$root"
      sleep 1
      found_root=$($BB findfs $root)
      timeout=$((timeout-1))
    done
    if [ "x$found_root" != 'x' ]; then
      msg=$(printf "%s resolved to %s" "$root" "$found_root")
      root=$found_root
      [ $timeout -eq $rootdelay ] && INFO "$msg" || \
        INFO "$msg in $((rootdelay-timeout)) seconds.     "
    else
      echo "Timeout waiting $rootdelay seconds for $root to appear.         "
    fi
  ;;
  *)
    while [ ! -e "$root" ] && [ $timeout -gt 0 ]; do
      $BB mdev -s
      printf " Waiting %d seconds for %s to appear     \r" "$timeout" "$root"
      $BB sleep 1
      timeout=$((timeout-1))
    done
    if [ -e "$root" ]; then
      [ $timeout -eq $rootdelay ] && INFO "Root device $root exists"  || \
        INFO "$root appeared after $((rootdelay-timeout)) seconds.          "
    else
      echo "Timeout waiting $rootdelay seconds for $root to appear.       "
    fi
  ;;
esac

$BB mkdir -p "$NEWROOT"

if ! [ -e "$root" ]; then
  echo
  echo "Root device not found! If you are sure this device exists, "
  printf "try booting with 'rootdelay=$((rootdelay+10))' or similar."
  FAIL
fi

$BB mount -o ro "$root" "$NEWROOT" ||  FAIL "Couldn't mount root FS read-only!"

[ "x$init" = 'x' ] && init='/sbin/init'
[ -f "$NEWROOT/$init" ] || FAIL "$root successfully mounted but no $init found!"

P=$($BB pidof uevent 2> /dev/null)
[ $? -eq 0 ] && INFO "Stopping ramfs uevent daemon" && $BB kill $P

if [ -f "$mdev_log" ] ; then
  printf '==== preparing to switch_root, up %s sec.\n' \
    "$($BB cut -d ' ' -f 1 /proc/uptime)" >> "$mdev_log"
fi

INFO "Unmounting initramfs system directories"
$BB umount /sys 
$BB mount --move /dev "$NEWROOT/dev"
$BB umount /proc

cmd=switch_root
INFO "Executing $cmd and spawning init"
exec $BB $cmd "$NEWROOT" "$init" $INIT_ARGS

$BB mount -t proc proc /proc
FAIL "Couldn't perform $cmd"

