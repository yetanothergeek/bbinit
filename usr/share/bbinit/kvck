#!/bin/busybox sh

# Kernel version check.

BB=/bin/busybox
QUIET=
UPDATE=
KIMG=
RAMFS=


usage () {
$BB cat << EOF

 Check to see if a kernel matches an initramfs
 Usage: $0 [options] <kernel> <initramfs>
 Options:
   -q Quiet mode
   -u Update initramfs if needed 

 If <kernel> parameter begins with a slash, it is assumed
 to be the path to a kernel image file. 

 If <kernel> parameter begins with a digit [1-9] it is 
 assumed to be a kernel version number.

 ( Otherwise it is an error because I don't know what it is. )

 Returns 0 if initramfs matches kernel or is
 successfully updated, non-zero otherwise.

EOF
exit $1
}


die () {
  echo "ERROR: $1" 1>&2
  exit 1
}


say () {
  [ "$QUIET" = 'yes' ] || echo "$@"
}


readable () {
  [ -e "$1" ] || die "File not found: '$1'"
  [ -f "$1" ] || die "Not a regular file: '$1'"
  [ -r "$1" ] || die "Can't read '$1' [Permission denied]"
}


while [ $# -gt 0 ] ; do
  case $1 in
    -q)  QUIET=yes ;;
    -u)  UPDATE=yes ;;
    -h|--help) usage 0 ;;
    -*) die "Unknown option '$1'" ;;
    *)
    if [ -z "$KIMG" ] ; then
      KIMG=$1
    else
      if [ -z "$RAMFS" ] ; then
        RAMFS=$1
      else
        die "Extra option: '$1'"
      fi
    fi
    ;;
  esac
  shift
done

[ -z "$KIMG" ] && die "No kernel specified."
[ -z "$RAMFS" ] && die "No ramfs image specified."

case "$KIMG" in
  /*)
    readable "$KIMG"
    KVER=$( $BB strings $KIMG | \
      $BB awk 'BEGIN {found=0} (found==0) && /^[1-9]\.[0-9]+\.[0-9]+/ {print $1; found=1}'
    )
    [ -z "$KVER" ] && die "Unable to find kernel version" 1
  ;;
  [1-9]*) KVER=$KIMG ;;
  *) die "Unrecognized <kernel> argument: '$KIMG'" ;;
esac

case "$KVER" in
  [1-9]*.[0-9]*) ;;
  *) die "Unusual kernel version: '$KVER'" ;;
esac


if [ -e "$RAMFS" ] ; then
  readable "$RAMFS"
  UZ=cat
  for Z in gzip bzip2 xz ; do
    $BB $Z -dc $RAMFS &> /dev/null && UZ="$Z -dc"
  done
  for F in $($BB $UZ $RAMFS | $BB cpio -H newc -ti '*' 2> /dev/null) ; do
    [ "$F" = "lib/modules/$KVER" ]     && say OK && exit 0
    [ "$F" = "usr/lib/modules/$KVER" ] && say OK && exit 0
  done
fi

if [ "$UPDATE" = 'yes' ] ; then
  MKRFS=$($BB dirname $($BB readlink -f $0))/mkramfs
  $MKRFS $KVER $RAMFS
else
  say FAIL
  exit 1
fi

