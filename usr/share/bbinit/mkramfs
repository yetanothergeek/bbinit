#!/lib/bb/sh

INFO  () { echo -en "$@" 1>&2; }
WARN  () { printf "*** Warning: %s\n" "$@" 1>&2; }
ERROR () { printf "*** ERROR: %s\n" "$@" 1>&2; }
FATAL () { ERROR "$@"; exit 1; }


OneOrZero () {
 local V=$(eval echo $(echo "\$$1"))
 case "$V" in
   0|1) ;;
   *) FATAL "\"$1\" must be 0 or 1, not '$V'" ;;   
 esac
}


gen_lookups () {
  if ! [ -f "$ModAlias" ]; then
    WARN "Cannot find $ModAlias"
    return 1
  fi
  local footer='esac; }'
  INFO 'Parsing modules.alias... '
  local ModAliasTmp=./tmp/ModAliasTmp
  awk '/^alias / {
        gsub(/\(/,"\"(\"")
        gsub(/\)/,"\")\"")
    printf("%s %s\n",$2,$3)
  }' "$ModAlias" | sort > "$ModAliasTmp"
  INFO 'done.\n'
  INFO 'Generating lookup tables... '
  LookUp=./tmp/LookUp
  C=''
  while read A M ; do
    I=${A:0:1}
    if [ "$I" != "$C" ]; then
      [ "$C" ] && echo $footer
      echo "lookup_$I" '() { case "$1" in'
      C="$I"
    fi
    echo "$A) echo '$M' ;;"
  done < "$ModAliasTmp" > "$LookUp"
  echo $footer >> "$LookUp"
  rm -f "$ModAliasTmp"
  . "$LookUp"
  rm -f "$LookUp"
  INFO 'done.\n'
}

resolve_alias () { 
  lookup_${1:0:1} "$1"
}

sysfs_mods () {
  [ $BBI_IGNORE_HOST = 1 ] && return
  [ ! -f "$ModAlias" ] && WARN "Build may be incomplete" && return 1
  local A
  for A in $(
    find /sys/devices/ -type f -name modalias -exec cat {} + 2> /dev/null \
    | sort -u
  ) ; do
    resolve_alias "$A"
  done | sort -u
}

get_modfile () {
  if [ -e "$MODULES_SRC_DIR/modules.order" ] ; then
    local F=$MODULES_SRC_DIR/$(
      grep "/${1//[_-]/[_-]}.ko$" "$MODULES_SRC_DIR/modules.order"
    )*
    F=$(echo $F)
    [ -e "$F" ] && echo "$F"
  else
    find "$MODULES_SRC_DIR/kernel" -type f -name "${1//[_-]/[_-]}.ko*"
  fi
}

Keepers='\
input/keyboard
input/serio
hid/usbhid
usb
scsi
ata
block
'

base_modules () {
  for M in $(sysfs_mods) ; do 
    F=$(get_modfile "$M")
    case "$F" in
      */drivers/*) 
        case "$F" in
          */mousedev.ko*|*/pcspkr.ko*) ;;
          *)
            for K in $Keepers; do
              case "$F" in
                */drivers/$K/*) echo ${M//-/_} ;;
              esac
            done
          ;;        
        esac
      ;;   
    esac
  done
  for M in $BBI_EXTRA_MODULES ; do
   echo "${M//-/_}"
  done
}

NewList=
Listed () {
  local M
  for M in $NewList; do
    [ $M = $1 ] && return 0
  done
  return 1
}


SoftDepsHandled=0

get_soft_deps () {
  NewList=$ModList
  local N=0
  for MyMod in $ModList; do
    N=$((N+1))
    [ $N -le $SoftDepsHandled ] && continue
    while read Mod Deps; do
    if [ "$Mod" = "$MyMod" ] ; then 
      for Dep in $Deps; do
        if [ "$Dep" = 'crc32c' ] ; then
          if grep -qs '^flags.*\<sse4_2\>' /proc/cpuinfo; then
             Dep='crc32c_intel'
          else
            Dep='crc32c_generic'
          fi
        else
          local RealName=$(resolve_alias $Dep)
          [ "$RealName" ] && Dep=$RealName
        fi
      done
      Listed $Dep || NewList="$NewList $Dep"
    fi
    done < "$softdeps"
  done
  NewList=$(echo $NewList)
  local Diff=$((${#NewList}-${#ModList}))
  ModList=$NewList
  [ $Diff -eq 0 ] && return 1 || return 0
}


HardDepsHandled=0

get_hard_deps () {
  NewList=$ModList
  local N=0
  for MyMod in $ModList; do
    N=$((N+1))
    [ $N -le $HardDepsHandled ] && continue
    local Deps=$(grep "^$MyMod " "$harddeps") || continue
    for Dep in $Deps; do
      Listed $Dep || NewList="$NewList $Dep"
    done
  done
  HardDepsHandled=$N
  NewList=$(echo $NewList)
  local Diff=$((${#NewList}-${#ModList}))
  ModList=$NewList
  [ $Diff -eq 0 ] && return 1 || return 0
}


get_deps () {
INFO "Resolving module dependencies..."

softdeps=./tmp/softdeps
sed \
-e 's/^softdep[ \t]*//' \
-e 's/[ \t]pre:/ /g' \
-e 's/[ \t]post:/ /g' \
-e 's/[ \t]platform:/ /g' \
-e 's/-/_/g' \
$MODULES_SRC_DIR/modules.softdep > "$softdeps"

harddeps=./tmp/harddeps
sed \
-e 's#[^ \t]*/##g' \
-e 's/\.[^ \t]*//g' \
-e 's/-/_/g' \
$MODULES_SRC_DIR/modules.dep > "$harddeps"

Loop=0
while get_hard_deps || get_soft_deps ; do
  INFO .
  Loop=$((Loop+1))
  if [ $Loop -ge 32 ] ; then
    WARN "Unable to recurse dependencies after $Loop tries, giving up."
    break
  fi
done
INFO ' done.\n'
rm -f "$harddeps"
rm -f "$softdeps"
}


list_modules () {
  ModList=$(base_modules)
  get_deps
  INFO 'Resolving module filenames...'
  local PfxLen=${#BBI_MODULES_PATH}
  PfxLen=$((PfxLen+2))
  for M in $ModList; do
    get_modfile $M
  done | sort -u | cut -c $PfxLen-
  INFO ' done.\n'
}


setup_env () {
  [ "x$BBI_MKRAMFS_CONF"  =  'x' ] && \
    BBI_MKRAMFS_CONF='/etc/bb.d/conf/mkramfs.conf'

  # We want current environment variables to take precedence over
  # config file, so save current env to file, load config, re-load saved env.
  if [ -f "$BBI_MKRAMFS_CONF" ] && [ -r "$BBI_MKRAMFS_CONF" ] ; then
    local ENV_TMP=$(mktemp /tmp/bbinit_env.XXXXXX)
    set > "$ENV_TMP"
    . "$BBI_MKRAMFS_CONF"
    . "$ENV_TMP"
    rm -f "$ENV_TMP"
  fi

  [ "x$BBI_EXCLUDE_MDIRS" = 'x' ] || \
    WARN 'BBI_EXCLUDE_MDIRS is deprecated and should not be set.'

  # Fallbacks in case these still aren't set
  : ${BBI_COMPRESSOR:=gzip}
  : ${BBI_EXTRA_MODULES:=ext2 ext3 ext4}
  : ${BBI_IGNORE_HOST:=0}
  : ${BBI_MODULES_PATH:=/lib/modules}
  : ${BBI_RAMFS_BUSYBOX:=/lib/bb/busybox}
  : ${BBI_RAMFS_INIT:=$(dirname $(readlink -f $0))/init}
  : ${BBI_RAMFS_NAME:=ramfs}
  : ${BBI_EXTRA_FILES_ROOT:=/}
  : ${BBI_GZIP_MODULES:=0}
  : ${BBI_KEEP_TMPFILES:=0}

  OneOrZero BBI_IGNORE_HOST
  OneOrZero BBI_GZIP_MODULES
  OneOrZero BBI_KEEP_TMPFILES
}


fix_module_compression () {
  if [ "$BBI_GZIP_MODULES" = '1' ] ; then
    find $MODULES_TRG_DIR/kernel/ -name '*.ko' | sort | \
    while read KO ; do
      gzip $KO
    done
  else
    find $MODULES_TRG_DIR/kernel/ -type f -name '*.ko.*' | sort | \
    while read M ; do
      case $M in
        *.ko.gz)  gzip  -d $M ;;
        *.ko.xz)  xz    -d $M ;;
        *.ko.bz2) bzip2 -d $M ;;
        *.ko.zst) zstd -q -d $M && rm -f $M ;;
        *) WARN "Unsupported file extension:\n $M"
      esac
    done
  fi
}


copy_module () {
  local SRC="$1"
  [ -e ./lib/modules/$SRC ] && return
  if [ -e "$BBI_MODULES_PATH/$SRC" ] ; then
    install -m 644 -D $BBI_MODULES_PATH/$SRC ./lib/modules/$SRC
  else
    basename "$SRC" >> missing
  fi
}


main () {

  setup_env
  local TOPDIR=$(mktemp -td initramfs.XXXXXX)

  [ "x$KVER" = 'x' ] && KVER=$(uname -r)

  MODULES_SRC_DIR="$BBI_MODULES_PATH/$KVER"
  MODULES_TRG_DIR="./lib/modules/$KVER"
  ModAlias=$MODULES_SRC_DIR/modules.alias

  case "$BBI_RAMFS_NAME" in 
    */*) ;;
    *) BBI_RAMFS_NAME="/boot/$BBI_RAMFS_NAME" ;;
  esac

  cd $TOPDIR || exit
  mkdir bin dev etc lib proc sys tmp usr usr/bin usr/sbin var
  cp $BBI_RAMFS_BUSYBOX bin/busybox
  chmod 755 bin/busybox
  cp $BBI_RAMFS_INIT ./init
  chmod 755 ./init

  gen_lookups
  local ModFiles=$(list_modules)
  INFO 'Copying modules... '
  for SRC in $ModFiles; do copy_module "$SRC" ; done
  INFO 'done.\n'
  if [ "$BBI_IGNORE_HOST" = 0 ] ; then
    find "$MODULES_TRG_DIR/kernel/" -name '*.ko*'  | sort | \
    while read KO ; do
      KO=${KO##*/}
      echo ${KO%.ko*}
    done > etc/modules
  else
    touch ./etc/autoscan
  fi
  fix_module_compression
  if [ -e missing ] ; then
    for M in $(sort -u missing) ; do 
      WARN "missing module '$M'"
    done
    rm -f missing
  fi

  for EXT in builtin alias dep; do
    F=$MODULES_SRC_DIR/modules.$EXT 
    [ -e $F ] && cp $F $MODULES_TRG_DIR/
  done

  case "$BBI_EXTRA_FILES_ROOT" in
    */.) ;;
    */) BBI_EXTRA_FILES_ROOT="$BBI_EXTRA_FILES_ROOT." ;;
    *) BBI_EXTRA_FILES_ROOT="$BBI_EXTRA_FILES_ROOT/."
  esac
  if [ -d "$BBI_EXTRA_FILES_ROOT" ] ; then
    for F in $BBI_EXTRA_FILES ; do
      case "$F" in
       /*) 
         local D=.$(dirname "$F")
         mkdir -p "$D"
         yes n | cp -ai "$BBI_EXTRA_FILES_ROOT$F" "$D"
       ;;
       *)
         WARN "BBI_EXTRA_FILES paths must begin with / (skipping $F)"
       ;;
      esac
    done
  else
    WARN "BBI_EXTRA_FILES_ROOT path not found: $BBI_EXTRA_FILES_ROOT"
  fi

  [ -e etc/mdev.conf ] || \
  echo '$MODALIAS=.* 0:0 660 @modprobe "$MODALIAS" 2> /dev/null' > etc/mdev.conf

  # Minimal profile for rescue shell
  [ -e etc/profile ] || \
cat << EOF > etc/profile
alias reboot='sync; reboot -f'
alias poweroff='sync; poweroff -f'
alias halt='sync; halt -f'
EOF

  [ -f "$BBI_FIXUP" ] && [ -x "$BBI_FIXUP" ] && $BBI_FIXUP

  if > "$BBI_RAMFS_NAME" ; then
    INFO "Creating \"$BBI_RAMFS_NAME\"; $BBI_COMPRESSOR format... "
    find . | grep -v '\./tmp/..*' | cpio -H newc -o | \
      $BBI_COMPRESSOR > "$BBI_RAMFS_NAME"
    INFO "done.\n"
    INFO $(
      printf 'Created "%s" (%s entries, %sMB)\n' \
      $BBI_RAMFS_NAME \
      $(find . | grep -v '\./tmp/..*' | wc -l) \
      $(stat -c %s $BBI_RAMFS_NAME | \
      awk '{printf("%0.2f\n", $1/(1024*1024))}')
    )'\n'
  else
    ERROR "Failed to create $BBI_RAMFS_NAME"
  fi
  [ "$BBI_KEEP_TMPFILES" = '1' ] || rm -r $TOPDIR
}


KVER=$1
[ "x$2" = 'x' ] || BBI_RAMFS_NAME=$2

main

