/usr/share/bbinit/mkramfs:
This builds an initial ramfs filesystem containing busybox and the kernel
modules required to boot the system. By default it uses the currently 
running kernel version and creates a gzipped cpio archive file named 
/boot/ramfs.

This script supports two [optional] command line arguments:
  1. The version of the kernel, e.g. "4.7.1-1-ARCH" or "4.4.17-0-grsec"
     ( This should be the base name of an existing subdirectory under
     /lib/modules )
  2. An output filename. If the filename contains a slash it is assumed
     to be an absolute path, otherwise it will be created in /boot/.

The script also recognizes these environment variables:
  BBI_EXCLUDE_MDIRS: 
    Modules in these subdirectories of /lib/modules/<kernel>/
    will be excluded from the initramfs, the default is 
    "cpufreq gpu hotplug kvm sound watchdog"
  
  BBI_COMPRESSOR:
    This tells the script which program should be used to compress
    the ramfs. Options include gzip, bzip2, or xz. The default is gzip.
    To disable compression, use BBI_COMPRESSOR=cat

    Note that if you want to use xz compression, you must include the
    full path to the xz program to prevent the busybox shell from trying
    to run its own xz applet which only supports decompression. Also, 
    your kernel's internal xz decompressor might not support the default
    integrity checking of your xz program, so to use xz you will probably
    need something like: BBI_COMPRESSOR='/usr/bin/xz -9 --check=crc32'

  BBI_RAMFS_INIT:
    The initramfs image contains a /init script in its root directory.
    By default this script copied from /usr/share/bbinit/init but if
    for some reason you want to use your own init script (or a modified
    copy of the default) you can specify it here. It doesn't matter what
    name you give your script, the copy in the initramfs will always be
    renamed to /init. Be warned: this script is a very critical aspect
    of the boot process, any errors in this script can leave you with an 
    unbootable image.

  BBI_MODULES_PATH:
    By default the mkramfs script will look under /lib/modules/ for a
    directory with the same name as the kernel version. For example,
    if your kernel version is 9.72.43 the script will look for
    modules in /lib/modules/9.72.43 but if you want it to look
    in /home/alice/build/9.72.43 instead, then use:
      BBI_MODULES_PATH=/home/alice/build
    
  BBI_EXTRA_MODULES:
    These modules will be included in the initramfs even if they are not
    detected by the script. The default is "ext2 ext3 ext4"

  BBI_GZIP_MODULES:
    If BBI_GZIP_MODULES=1 then all included kernel modules will be individually 
    compressed (gzipped) within the initramfs archive. Since the archive itself
    is also usually compressed, this will probably have little effect on the
    overall size of the archive. The main advantage is when the initramfs is 
    decompressed at boot-up time the modules will take up less space in RAM.
    It probably won't make much difference in boot-up time but creating the
    initramfs might be slightly slower (or faster) depending on whether the
    copied modules are already compressed on disk.
    Note that this requires that your busybox module utilities are built with
    support for compressed modules. Also note that the modules will be suffixed
    with ".ko.gz" rather than ".ko"

  BBI_IGNORE_HOST:
    Normally the mkramfs script will scan the /sys/ directory of the
    machine it is running on in order to determine what hardware support
    is needed to boot up on the same machine. If you want to build a more
    customized image you can set BBI_IGNORE_HOST=1 and specify the desired
    modules in BBI_EXTRA_MODULES. For building a "portable" image that is
    more likely to work on other machines, the /usr/share/bbinit/generic
    script should take care of this for you.

  BBI_HOST_BUSYBOX:
    This is the busybox that will run on the host machine to create the
    iniramfs. The default is the first busybox found in you $PATH.

  BBI_RAMFS_BUSYBOX:
    This is the busybox that will be copied into the initramfs image. 
    In most cases it will simply be the same $BBI_HOST_BUSYBOX that is used
    to build the image, but you can specify something different here,
    for example if you are creating a ramfs image for a different 
    architecture.

  BBI_KEEP_TMPFILES:
    The mkramfs script creates a temporary directory under /tmp/ with a
    name in the form of "/tmp/initramfs.XXXXXX" (with the XXXXXX being 
    replaced by some random characters). This directory contains all the
    files and sub-directories used to create the initramfs image.
    It is normally deleted after the initramfs is created, but if you want to
    examine its contents for debugging or educational purposes, you can set:
    BBI_KEEP_TMPFILES='1' and the directory will not be removed.

  BBI_EXTRA_FILES:
    This can be a whitespace-delimited list of files and/or folders that will
    also be copied into the ramfs. Paths to the items must be absolute:
    they must begin with a slash (/). Spaces in filenames ARE NOT ALLOWED!
    Paths to the items are preserved, for instance /usr/bin/e2fsck on the 
    host is copied to /usr/bin/e2fsck in the iniramfs -- unless you need to
    copy files from an alternate location, see BBI_EXTRA_FILES_ROOT, below.
    Note that any files specified here which conflict with the base files 
    of the initramfs will be ignored. Also note that bbinit makes no effort
    to resolve dependencies of executable binaries -- if you include a program 
    which depends on shared libraries, you must also list the libraries. 

  BBI_EXTRA_FILES_ROOT:
    This allows specifying an alternate source to copy BBI_EXTRA_FILES from.
    For example, if: 
      BBI_EXTRA_FILES="/sbin/e2fsck /usr/bin/nano"  
    and:
      BBI_EXTRA_FILES_ROOT=/media/cdrom
    then the files are copied into the initramfs as:
      /media/cdrom/sbin/e2fsck  =>  /sbin/e2fsck
      /media/cdrom/usr/bin/nano =>  /usr/bin/nano

  BBI_FIXUP:
    Since there will likely be some unforeseen use cases where things are
    not handled properly by bbinit, this gives you an opportunity to exectute
    one final script just before the actual ramfs archive is created. 
    If this script is specified (and it exists and is executable) it will be
    run in the "/tmp/initramfs.XXXXXX" directory (described above) after all 
    other operations are completed (except for the ramfs archive creation).

  BBI_MKRAMFS_CONF:
    Most of the variables described above can be saved to a file, by default
    it is /etc/bb.d/conf/mkramfs.conf (See description below)


/etc/bb.d/conf/mkramfs.conf:
This file contains the environment variables listed above and is sourced by
the mkramfs, in case you want pre-set variables for the script. The file is 
simply a list of environment variables, one per line, in NAME='value' format. 
This file is optional, and current environment variables will take precedence
over the file variables. Due to some chicken-or-the-egg considerations, the
BBI_HOST_BUSYBOX and BBI_MKRAMFS_CONF variables are not valid from within the
config file.


Note that it is possible to use bbinit without an initramfs, as long as
the modules required to mount the root filesystem are compiled into your
kernel.

