bbinit is a minimal init system based on busybox. It is mostly developed
and tested on Arch Linux and Alpine Linux but should be usable on other
Linux distributions if you're willing to experiment. (I have had some
success using it to boot OpenSuSE, Slackware, and VoidLinux.)

Please note that bbinit simply launches a bare minimum of processes used
to configure the system at startup and attempts to stop everything cleanly
at shutdown. It is NOT a "service manager"

Quick Start:
I hope you will read and fully understand the rest of this README before
trying to use bbinit, but if you are impatient and enjoy living dangerously,
here is the basic installation procedure (as root):

1. Copy the contents of bbinit/etc to /etc/

2. If you don't already have a file named /etc/inittab, create a symbolic 
   link from /etc/bb.d/conf/inittab to /etc/inittab like this:
     ln -s bb.d/conf/inittab /etc/
   (If you already have a /etc/inittab file, leave it alone - your current
    init system probably needs it!)

3. If you don't already have a file named /etc/mdev.conf, create a symbolic 
   link from /etc/bb.d/conf/mdev.conf to /etc/mdev.conf like this:
     ln -s bb.d/conf/mdev.conf /etc/
   (If you already have a /etc/mdev.conf file, leave it alone - your current
    system probably needs it!)

4. Make sure you have a statically linked, fully functional /bin/busybox
   or /bin/busybox.static installed on your system. If you run the command:
   'ldd /bin/busybox' on a GNU/Linux system, it should report:
   "Not a dynamic executable" <= (This is what you want)
   If your distro doesn't provide a usable busybox package, you should
   be able to download one from: https://busybox.net/downloads/binaries/
   Look under the latest /*-defconfig-multiarch/ subdirectory for one that
   matches your machine's architecture.

5. Copy the contents of bbinit/usr/share/bbinit/ to /usr/share/bbinit/

6. Run the command: /usr/share/bbinit/mkramfs

7. Edit your bootloader config and add an entry specifying /boot/ramfs
   as the initrd and init=/etc/bb.d/init

8. Cross your fingers, say a prayer, or whatever makes you feel invincible,
   and reboot, choosing your new bootloader option when prompted.

9. If something went wrong, should still be able to boot using your previous
   bootloader option. If not, you might need to boot from external media to
   fix things.


Maybe the best way to describe what bbinit does is to examine its files:

/usr/share/bbinit/mkramfs:
This builds an initial ramfs filesystem containing busybox and the kernel
modules required to boot the system. By default it uses the currently 
running kernel version and creates a gzipped cpio archive file named 
/boot/ramfs.

This script supports two [optional] command line arguments:
  1. The version of the kernel, e.g. "4.7.1-1-ARCH" or "4.4.17-0-grsec"
     ( This should be the base name of an existing subdirectory under
     /lib/modules )
  2. An output filename. If the filename contains a slash it is assumed
     to be an absolute path, otherwise it will be created in /boot/.

The script also recognizes these environment variables:
  BBI_EXCLUDE_MDIRS: 
    Modules in these subdirectories of /lib/modules/<kernel>/
    will be excluded from the initramfs, the default is 
    "cpufreq gpu hotplug kvm sound watchdog"
  
  BBI_COMPRESSOR:
    This tells the script which program should be used to compress
    the ramfs. Options include gzip, bzip2, or xz. The default is gzip.
    To disable compression, use BBI_COMPRESSOR=cat .

    Note that if you want to use xz compression, you must include the
    full path to the xz program to prevent the busybox shell from trying
    to run its own xz applet which only supports decompression. Also, 
    your kernel's internal xz decompressor might not support the default
    integrity checking of your xz program, so to use xz you will probably
    need something like: BBI_COMPRESSOR='/usr/bin/xz -9 --check=crc32'

  BBI_RAMFS_INIT:
    The initramfs image contains a /init script in its root directory.
    By default this script copied from /usr/share/bbinit/init but if
    for some reason you want to use your own init script (or a modified
    copy of the default) you can specify it here. It doesn't matter what
    name you give your script, the copy in the initramfs will always be
    renamed to /init. Be warned: this script is a very critical aspect
    of the boot process, any errors in this script can leave you with an 
    unbootable image.

  BBI_MODULES_PATH:
    By default the mkramfs script will look under /lib/modules/ for a
    directory with the same name as the kernel version. For example,
    if your kernel version is 9.72.43 the script will look for
    modules in /lib/modules/9.72.43 but if you want it to look
    in /home/alice/build/9.72.43 instead, then use:
      BBI_MODULES_PATH=/home/alice/build
    
  BBI_EXTRA_MODULES:
    These modules will be included in the initramfs even if they are not
    detected by the script. The default is "ext2 ext3 ext4"

  BBI_GZIP_MODULES:
    If BBI_GZIP_MODULES=1 then all included kernel modules will be individually 
    compressed (gzipped) within the initramfs archive. Since the archive itself
    is also usually compressed, this will probably have little effect on the
    overall size of the archive. The main advantage is when the initramfs is 
    decompressed at boot-up time the modules will take up less space in RAM.
    It probably won't make much difference in boot-up time but creating the
    initramfs might be slightly slower (or faster) depending on whether the
    copied modules are already compressed on disk.
    Note that this requires that your busybox module utilities are built with
    support for compressed modules. Also note that the modules will be suffixed
    with ".ko.gz" rather than ".ko"

  BBI_IGNORE_HOST:
    Normally the mkramfs script will scan the /sys/ directory of the
    machine it is running on in order to determine what hardware support
    is needed to boot up on the same machine. If you want to build a more
    customized image you can set BBI_IGNORE_HOST=1 and specify the desired
    modules in BBI_EXTRA_MODULES. For building a "portable" image that is
    more likely to work on other machines, the /usr/share/bbinit/generic
    script should take care of this for you.

  BBI_HOST_BUSYBOX:
    This is the busybox that will run on the host machine to create the
    iniramfs. The default is the first busybox found in you $PATH.

  BBI_RAMFS_BUSYBOX:
    This is the busybox that will be copied into the initramfs image. 
    In most cases it will simply be the same $BBI_HOST_BUSYBOX that is used
    to build the image, but you can specify something different here,
    for example if you are creating a ramfs image for a different 
    architecture.

  BBI_KEEP_TMPFILES:
    The mkramfs scripts creates a temporary directory under /tmp/ with a
    name in the form of "/tmp/initramfs.XXXXXX" (with the XXXXXX being 
    replaced by some random characters). This directory contains all the
    files and sub-directories used to create the initramfs image.
    It is normally deleted after the initramfs is created, but if you want to
    examine its contents for debugging or educational purposes, you can set:
    BBI_KEEP_TMPFILES='1' and the directory will not be removed.

  BBI_EXTRA_FILES:
    This can be a whitespace-delimited list of files and/or folders that will
    also be copied into the ramfs. Paths to the items must be absolute:
    they must begin with a slash (/). Spaces in filenames ARE NOT ALLOWED!
    Paths to the items are preserved, for instance /usr/bin/e2fsck on the 
    host is copied to /usr/bin/e2fsck in the iniramfs -- unless you need to
    copy files from an alternate location, see BBI_EXTRA_FILES_ROOT, below.
    Note that any files specified here which conflict with the base files 
    of the initramfs will be ignored. Also note that bbinit makes no effort
    to resolve dependencies of executable binaries -- if you include a program 
    which depends on shared libraries, you must also list the libraries. 

  BBI_EXTRA_FILES_ROOT:
    This allows specifying an alternate source to copy BBI_EXTRA_FILES from.
    For example, if: 
      BBI_EXTRA_FILES="/sbin/e2fsck /usr/bin/nano"  
    and:
      BBI_EXTRA_FILES_ROOT=/media/cdrom
    then the files are copied into the initramfs as:
      /media/cdrom/sbin/e2fsck  =>  /sbin/e2fsck
      /media/cdrom/usr/bin/nanp =>  /usr/bin/nano

  BBI_FIXUP:
    Since there will likely be some unforeseen use cases where things are
    not handled properly by bbinit, this gives you an opportunity to exectute
    one final script just before the actual ramfs archive is created. 
    If this script is specified (and it exists and is executable) it will be
    run in the "/tmp/initramfs.XXXXXX" directory (described above) after all 
    other operations are completed (except for the ramfs archive creation).

  BBI_MKRAMFS_CONF:
    Most of the variables described above can be saved to a file, by default
    it is /etc/bb.d/conf/mkramfs.conf (See description below)


/etc/bb.d/conf/mkramfs.conf:
This file contains the environment variables listed above and is sourced by
the mkramfs, in case you want pre-set variables for the script. The file is 
simply a list of environment variables, one per line, in NAME='value' format. 
This file is optional, and current environment variables will take precedence
over the file variables. Due to some chicken-or-the-egg considerations, the
BBI_HOST_BUSYBOX and BBI_MKRAMFS_CONF variables are not valid from within the
config file.


Note that it is possible to use bbinit without an initramfs, as long as
the modules required to mount the root filesystem are compiled into your
kernel.


/usr/share/bbinit/init:
This script is copied into the initramfs by mkramfs and is responsible
for early setup of the ramfs, loading kernel modules, mounting fundamental
system directories, and eventually switching control over to the "real" 
system installed on the hard drive.


/usr/share/bbinit/kvck:
In order for the system to boot properly, the ramfs file MUST match the 
kernel version loaded by your bootloader. Running the kvck script 
(Kernel Version ChecK) can usually detect a mismatch and optionally update
the ramfs if needed. For Arch Linux and Void Linux systems, see the description
of the ./dist/* scripts below to perform this operation automatically
whenever the kernel is updated by the package manager. If you know how to
integrate this type of "hook" into other package managers I would like to
hear from you. Otherwise you can run this command either post-upgrade or
just before a reboot:
  /usr/share/bbinit/kvck -u /boot/vmlinuz /boot/ramfs
(Being sure to adjust the kernel and ramfs names to match your setup)


/usr/share/bbinit/generic:
This is a wrapper script around mkramfs to create a more "generic"
initramfs, that is, one that is compatible with a wider variety
of hardware.

/usr/share/bbinit/utils/:
This directory contains some non-essential files which might come in
handy when working with bbinit.

/usr/share/bbinit/utils/bbck:
This script will test a build of busybox to see if it is suitable for use
with bbinit.

/usr/share/bbinit/utils/findmemdisk:
This is a "busybox port" of the syslinux "memdiskfind" utility to search 
for a MEMDISK instance and output the parameters needed to use the "phram"
driver in Linux to map it. It might be useful, for example, if your
initramfs needs to mount an ISO (cdrom or dvd) image that was booted with 
syslinux's "memdisk" loader.


/usr/share/bbinit/utils/pxesrv:
An easy-to-use script to run a PXE server using only syslinux and busybox.
(PXE is a technology used to boot a computer from an operating system served
over a network connection.)

/usr/share/bbinit/utils/solister:
A script to read an ELF executable file and output a list of shared library
dependencies required to execute the file. It performs a similar function
to programs such as "ldd" and "lddtree" but it is written in busybox shell
and uses only busybox applets. You might use it if you want to add additional
programs to an initramfs image.


/etc/inittab => /etc/bb.d/conf/inittab:
This file controls some aspects of the startup and shutdown of the 
system, including the launching of the /etc/bb.d/rc* scripts and the 
initialization of the tty terminals used for login. It is required
when using the bbinit system. Unfortunately the path of /etc/inittab
is hard-coded into busybox and therefore its location is 
non-negotiable, so...

THIS GETS TRICKY: In order for bbinit to coexist with another init system
which requires a different adaptation of /etc/inittab, bbinit uses 
this strategy:

It stores its own version of inittab in /etc/bb.d/conf/. At boot-up, it checks
whether the contents of /etc/bb.d/conf/inittab and /etc/inittab are identical.
If they are, all is good, and no further action needs to be taken. But if
the two files differ, bbinit will "bind mount" its own /etc/bb.d/conf/inittab
over the existing /etc/inittab, thus masking the contents of the original 
and preserving it for booting with the other init system.

The bind-mount strategy is required for "openrc" or "sysv" init, but not for
"systemd" or other setups like VoidLinux's "runit" system. For systems which
don't already have /etc/inittab, the file should simply be a symbolic link 
to /etc/bb.d/conf/inittab.

But EITHER WAY, a file named /etc/inittab MUST exist on the system!


/etc/mdev.conf => /etc/bb.d/conf/mdev.conf:
This file controls how busybox's mdev applet handles the files and permissions
for devices in the /dev directory. If your system already has a working
/etc/mdev.conf you should probably continue using it. But if you don't have a
file named /etc/mdev.conf you should create a symbolic link to
/etc/bb.d/conf/mdev.conf.


/etc/bb.d/rcS:
This script runs at startup and is responsible for a number of system
initialization tasks including: checking and mounting the devices and 
filesystems described by /etc/fstab; setting up the hostname described
by /etc/hostname; seeding the system's random number generator; setting
up the loopback (127.0.0.1) device; and launching busybox's system event
handlers (mdev and uevent)


/etc/bb.d/rcO:
This script runs at shutdown and is responsible for cleanly terminating
processes, shutting down network interfaces, and umounting filesystems.


/etc/bb.d/rc1:
Not strictly required, this script allows you to easily switch between
openrc and bbint at boot time by appending "openrc" as an option on the
kernel command line. (Currenly deprecated in favor of the "bind mount" 
strategy described above.)


/etc/bb.d/rc.local:
Here lives anything else you want to run at startup or shutdown. This
script is launched with the "start" argument immediately AFTER 
/etc/bb.d/rcS completes, and once again with the "stop" argument just
BEFORE /etc/bb.d/rc0 runs its default operations. You should customize
this file by adding/removing commands to the appropriate start/stop 
section to suit the specific needs of your system.


./dist/arch/bbinit:
This script is specific to Arch Linux based systems for booting a kernel
installed by pacman. See the comments at the beginning of the script for
instructions on how to enable it.


./dist/void/99-bbinit:
This script is specific to Void Linux based systems for booting a kernel
installed by xbps. See the comments at the beginning of the script for
instructions on how to enable it.


/bin/busybox:
Not included here, but this is the "Swiss Army Knife" executable that
performs many of the functions used by bbinit. It is also copied to the
initial ramfs, therefore your build of busybox should be a statically
linked binary not requiring any additional shared libraries. It should
have most of the available "applets" enabled. As of this writing, 
the default build in the Arch Linux "community" repository works nicely.
For Alpine Linux you should ensure that you have installed the 
"busybox-static" apk package before building the initramfs.

The busybox packages from OpenSuse and VoidLinux WILL NOT WORK!
They are missing some key features required to bring up the system.
Better to grab the latest precompiled version from :
  https://busybox.net/downloads/binaries/ *-defconfig-multiarch/busybox-*
or build your own statically-linked busybox from source, preferably 
using musl-gcc.

For handling hotplugging events on recent kernels it is strongly 
recommended that your busybox has the "uevent" applet enabled.


/etc/bb.d/init:
This script executes the single command: "exec /bin/busybox init".
It should be passed to the kernel command line in your bootloader as
"init=/etc/bb.d/init" to ensure that the busybox version of init
is launched, in case your system has an incompatible version of
/sbin/init.

/etc/bb.d/exec/:
This directory contains additional scripts that may be used by bbinit
or other scripts to launch the corrsponding busybox applets. At the time
of this writing it mostly contains wrappers around busybox's ifup, ifdown
and related commands. It also contains the autologin script described below.

/etc/bb.d/exec/autologin:
This script provides an option to automatically log in a specific user,
depending on the setting in the autologin.conf file, described below.

/etc/bb.d/conf/autologin.conf:
This file controls how the autologin feature behaves. If you set AUTOLOGIN=
to a valid username, that user will automatically be logged in on tty1 at
startup. If set to a single question mark [AUTOLOGIN=?] the value will be
determined from the kernel boot parameter "autologin=" (Both of these options
have some obvious security concerns, so use them with caution.)
If AUTOLOGIN= is empty, tty1 will behave as a normal login console.

/etc/bb.d/mdev/:
This directory is intended for scripts which are referenced by the bbinit 
version of /etc/mdev.conf. At the time of this writing, it contains a script
named "ifgrp" which supresses mdev error messages about missing group names,
and a slightly modified copy of Piotr Karbowski's "storage-device" script from
the mdev-like-a-boss project (renamed "map-dev-by") which populates the
/dev/disk/by-uuid, /dev/disk/by-label, and /dev/mapper/ directories.

/usr/share/lsramfs:
This is simply a convenience script to list the contents of an existing
ramfs file.

KERNEL COMMAND LINE PARAMETERS:
Most bootloaders allow you to pass additional arguments to the kernel at
boot-up. The initramfs created by bbinit recognizes and specifically handles
the following kernel parameters:

init=PROGRAM
Tells the init script the path and name of the program on the root filesystem 
to be executed after initramfs initialization process is complete. This program
will have the process id (PID) of #1. The default is /sbin/init but in order 
for bbinit to properly continue, this parameter should be set to
init=/etc/bb.d/init


root=DEVICE
Tells the init script where to look for the root filesytem to switch to once 
the initramfs initialization is complete. For example if your "real" Linux 
installation is on the first partition of the first hard drive, you could say:
  root=/dev/sda1

The initramfs also recognizes the form of root=LABEL=XXX or root=UUID=XXX
where XXX is the label or uuid of the root filesystem. 

The special case of root=self is handled differently; rather than mounting a
separate root filesystem, the initramfs will pass control to from /init to 
its own /sbin/init (or whatever program you specified as init= on the kernel
command line.) This may be useful for debugging purposes, and for situations
where a separate filesystem is not easily accessible such as a PXE boot 
environment.


rootdelay=N
Tells the init script to wait up to N seconds for the root device to appear. 
This is needed particularly on USB devices which are sometimes slow to respond.
The default is 20 seconds which is usually enough time for the device to appear
but you might need to increase it if you have an unusually slow USB interface.
Note that the script continues as soon as the device appears so there is 
really nothing to gain by reducing the timeout to less than the default, 
other than failing a little sooner if the device does not exist.


loglevel=N
Where N is a whole number between 1 and 8. This controls how much information
is printed to the screen during boot-up, with a value 1 showing only critical
error messages, and a value of 8 being maximum verbosity.

quiet
This parameter requires no arguments and is simply an alias for loglevel=1


mdev.log
This parameter requires no arguments and if present will tell mdev to log
all device events to a file named /dev/mdev.log

autologin=USER
Tells bbinit to automatically login the user named USER on tty1 
when boot-up is completed. ( This only works if 
/etc/bb.d/conf/autologin.conf is set to AUTOLOGIN=? )

BUGS/LIMITATIONS:
Probably there are many. There is currently no support for advanced filesystem 
handling such as LVM or encrypted root filesystems. 

One in particularly annoying problem is that when you (or your package manager)
update busybox, the system is not able to cleanly unmount the root filesystem
on the next reboot. This is because the old busybox is still in use (because it
is the PID #1 init) hence the filesystem stays "busy" as long as "init" is 
running. This is generally harmless, but /etc/bb.d/rc0 will spend a lot of time
trying to unmount the drive before finally giving up and rebooting while the
device is still mounted, triggering an automatic fsck on the next boot.


