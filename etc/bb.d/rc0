#!/bin/busybox sh


# Shutdown any active TCP/UDP servers before bringing down
# network interfaces, else some remote clients might hang.
stop_servers () {
  local BB='/bin/busybox'
  local srv_pids=$(
   $BB netstat -ntulp 2> /dev/null | $BB awk \
      '/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+.*/ {
        gsub(/\/.*$/,"");
        print $7
      }' | $BB sort -n
  )
  local all_pids=$(
    cd /proc
    $BB find . -maxdepth 1 -type d -name '[0-9]*' | $BB cut -c 3-
  )
  local kid_pids=$(
  for P in $all_pids
  do
    [ -e /proc/$P/status ] || continue
    PP=$($BB awk '/^PPid:/ {print $2}' /proc/$P/status )
    for NP in $srv_pids
    do
      [ $PP = $NP ] && echo $P
    done
  done
  )
  [ -z "$kid_pids" ] && [ -z "$srv_pids" ] && return
  echo "Sending active TCP/UDP servers the $1 signal."
  $BB kill -$1 $kid_pids $srv_pids
  $BB sleep 1
}



# Return a list of all PIDs, sorted by time: most recently started first, oldest last
get_pid_list () {
  cd /proc
  local P
  for P in [0-9]*; do
    [ -d "$P" ] || continue
    $BB awk '{sub(/.*) /,""); printf("%s.%.08d\n",$20,'$P')}' $P/stat
  done | $BB sort -gr | $BB awk '{sub(/[0-9]+\.[0]+/,""); print}'
  cd /
}



rcz_main () {

local BB='/bin/busybox'

local arg
for arg in $(${BB} cat '/proc/cmdline'); do
  [ "$arg" = 'openrc' ] && exec /sbin/rc shutdown
done
unset arg

cd /
$BB chvt 1
echo 'The system is going down for the count, NOW!' >&2
$BB sleep 2

local RCLOCAL=$($BB dirname $($BB readlink -f $0))/rc.local

[ -f "${RCLOCAL}" -a -x "${RCLOCAL}" ]  && "${RCLOCAL}" stop

$BB mount -t nfs | while read Dev on MtPt Etc ; do
  NfsSrv="${Dev%:*}"
  if $BB ping -q -c 1 -W 3 ${Dev%:*} > /dev/null ; then
    $BB umount "$MtPt" || $BB umount -l "$MtPt"
  else
    $BB umount -f "$MtPt" || $BB umount -f -l "$MtPt"
  fi
done

stop_servers TERM
stop_servers KILL

if $BB pgrep '^pppd$' > /dev/null
then
  echo "Shutting down ppp daemons"
  $BB which poff > /dev/null && poff -a
  for sig_spec in TERM KILL; do
    $BB pgrep '^pppd$' > /dev/null && $BB killall -${sig_spec} pppd && $BB sleep 1
  done
fi

(
  cd /sys/class/net
  for iface in *; do
    case "$iface" in
      lo) ;;
      *) 
        case $($BB cat "$iface/operstate") in
          down) ;;
          *)
            echo "Bringing down network interface '$iface'"
            $BB ifconfig "$iface" down
            $BB sleep 0.25s
          ;;
        esac
      ;;
    esac
  done
)

$BB sleep 1s

local sig_spec
for sig_spec in TERM KILL KILL; do
  echo "Sending remaining processes the $sig_spec signal"
  local some_pid
  for some_pid in $(get_pid_list) ; do
    [ $some_pid -eq 1 ] && continue
    [ $some_pid -eq $$ ] && continue 
    [ -d /proc/$some_pid ] || continue
    $BB kill -$sig_spec $some_pid
  done
  $BB sleep 1
done

echo "Saving random seed..."
random_seed=/var/lib/random-seed
$BB touch "${random_seed}"
$BB chmod 600 "${random_seed}"
poolfile=/proc/sys/kernel/random/poolsize
[ -r "${poolfile}" ] && bytes=$($BB cat "${poolfile}") || bytes=4096
$BB dd if=/dev/urandom of="${random_seed}" count=1 bs=$bytes 2> /dev/null

N=0
while [ $N -lt 10 ]; do
  if [ -e /proc/swaps ]; then
    [ $($BB wc -l < /proc/swaps) -gt 1 ] && $BB swapoff -a 
  else
    $BB swapoff -a # What else can we do if there is no /proc/swaps ?
  fi
  if [ -e /proc/mounts ] ; then
    local mounts="$($BB cat /proc/mounts)"
    echo "${mounts}" | while read dev mnt typ opt dmp pss; do
      case $mnt in
        /|/proc|/sys|/dev/pts|/dev) ;;
        *) 
          case "$typ" in
            proc|devtmpfs|devpts|sysfs) ;;
            *)
              if $BB umount -r $mnt; then
                echo "Unmounted $dev on $mnt"
              else
                 sleep 2
              fi
            ;;
          esac
        ;;
      esac
    done
  fi
  $BB sync
  $BB mount -o remount,ro / && break
  N=$((N+1))
  $BB sleep 1
  case $N in
    10)
      echo "Read-only remount of root filesystem failed after $N tries, giving up!"
      remount_ro_error_log='/var/log/remount-ro-error.log'
      $BB touch $remount_ro_error_log || break
      echo "PID   (Name)    cmdline" > $remount_ro_error_log
      for P in $($BB fuser /); do
        printf "%s " $P
        [ -e /proc/$P/status ] && $BB awk '/^Name:/ {printf(" (%s) ", $2)}'  /proc/$P/status  || printf " (???) "
        [ -e /proc/$P/cmdline ] && $BB tr '\0' ' ' < /proc/$P/cmdline || printf "???"
        echo
      done >> $remount_ro_error_log
      echo "Devices:" >> $remount_ro_error_log
      $BB mount >> $remount_ro_error_log
      echo "Check $remount_ro_error_log after next boot!"
      for N in 1 2 3
      do
        $BB sync
        $BB sync
        $BB sleep 1
      done
      exec $BB reboot -d 2 -f
    ;;
    *) echo "Read-only remount of root filesystem failed, retrying..."  ;;
  esac
done

echo "Returning control to init"
$BB sleep 1s
exec $BB kill -KILL -1

}

rcz_main
