/etc/bb.d/task/:
This directory contains the scripts needed to bring up the system at boot time,
and to bring the system down cleanly for a shutdown or reboot. The scripts are
sourced by /etc/bb.d/rcS in natural sort order at startup, and in reverse order
by /etc/bb.d/rcO on shutdown. Each script should contain a function called 
task_start() that is run at startup, and a function called task_stop() that
is run at shutdown.

You can modify the behavior of these tasks as described below.

/etc/bb.d/task/local/:
This optional directory may exist to provide user-defined customizations and/or
enhancements to the default tasks. This directory can contain six types of
scripts: pre_start, mask_start, post_start, pre_stop, mask_stop, post_stop.

The contents of a "pre" script will be executed just BEFORE its respective task.
The contents of a "post" script will be executed just AFTER its respective task.
The contents in a "mask" script will completely REPLACE the respective task.

The contents of a "start" script will be executed at boot-up.
The contents of a "stop" script will be executed at shutdown.

The scripts are named according to the task they modify. For example, if you 
wanted to run a script at boot-up, just after "/etc/bb.d/task/050-fstab" is
executed, your script should be named "/etc/bb.d/task/local/fstab.post_start"

Likewise, a script named "/etc/bb.d/task/local/alsa.pre_stop" would run at 
shutdown just before the "/etc/bb.d/task/130-alsa" task.

And a script named "/etc/bb.d/task/local/syslog.mask_start" would completely
replace the boot-up code in "/etc/bb.d/task/080-syslog". An empty *mask* file
will insure that the default task does nothing. (If the respective *pre* and/or
*post* script[s] exist, they will still behave as described above.)


              vvvvv !!!!!!! VERY IMPORTANT !!!!!!! vvvvv

These files are NOT run as standalone scripts! Rather, they are SOURCED directly
into the main init and shutdown scripts! This means any code in these scripts
will have a direct, global impact on the boot-up (or shutdown) process as a
whole. In particular, calling the "exit" command from your script will cause
the entire boot-up or shutdown process to terminate. Similarly, you should not 
use "set -x" or any other code that would cause the script to exit. Any syntax
errors can cause the entire boot process to fail as well. If your script creates
any global variables or functions, they should be prefixed with an underscore
(e.g. _myvar or _myfunc) to minimize conflicts with other globals. 

A safer approach is to create two files: the one that is sourced by the init
system; and a second "standalone" script that is executed by the sourced file.

================================================================================

TL;DR: What follows is mostly a rant about the complexity of logind/elogind
as it relates to dbus initialization, probably not something most folks would
be interested in.

At first glance, it might seem that launching dbus-daemon and elogind
should be two separate tasks, but it's not that simple:

So long as dbus-daemon is NOT linked to the libelogind library, then
dbus-daemon can be started and logins will work just fine, BUT...

If dbus-daemon links to libelogind and elogind is installed, then 
logging in requires elogind to be started. If dbus-daemon links
to libelogind and elogind is NOT installed, then dbus-daemon must
NOT be started, otherwise login attempts will hang!

This is further complicated by the fact that dbus-daemon needs to
be started BEFORE elogind, and cgroups must also be mounted before
elogind can run successfully. Mounting cgroups is a rather complex
procedure in itself, so it is handled by a separate script.

Also, elogind has hard-coded paths to /bin/reboot and /bin/poweroff.
In order for elogind to successfully execute these commands under bbinit,
those files must point to busybox. If the files exist, but are owned by
some other init system, our only option is to bind-mount on top of them. 
If they don't already exist, we can create our own symlinks, unless /bin/
is read-only; in that case there's not much we can do besides give up.
Shutdown and reboot will still work from busybox (as root or setuid) but
your DE's fancy GUI logout dialog will probably fail if these links can't
be properly set up.

Note that when I mention "elogind" above, these same issues also 
apply to systemd-logind and libsystemd.

